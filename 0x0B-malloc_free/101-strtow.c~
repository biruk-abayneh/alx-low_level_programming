#include <stdlib.h>

/**
 * count_word - Counts the number of words in a string.
 * @s: The input string.
 *
 * Return: The number of words.
 */
int count_word(const char *s)
{
	int flag = 0;
	int w = 0;

	if (s == NULL)
	return (0);

	for (int c = 0; s[c] != '\0'; c++)
	{
		if (s[c] == ' ')
			flag = 0;
		else if (flag == 0)
		{
			flag = 1;
			w++;
		}
	}

	return (w);
}

/**
 * strtow - Splits a string into words.
 * @str: The input string to split.
 *
 * Return: Pointer to an array of strings (Success), or NULL (Error).
 */
char **strtow(const char *str)
{
	int len = 0, words = 0, i = 0, k = 0, c = 0, start = 0;
	char **matrix = NULL;

	if (str == NULL || str[0] == '\0')
	return (NULL);

	while (str[len] != '\0')
		len++;

	words = count_word(str);

	if (words == 0)
	return (NULL);

	matrix = (char **)malloc(sizeof(char *) * (words + 1));
	if (matrix == NULL)
	return (NULL);

	while (i <= len)
	{
		if (str[i] == ' ' || str[i] == '\0')
		{
			if (c)
			{
				char *tmp = (char *)malloc(sizeof(char) * (c + 1));

				if (tmp == NULL)
				{
					for (int j = 0; j < k; j++)
						free(matrix[j]);
					free(matrix);
					return (NULL);
				}

				int end = i;
				int tmpIndex = 0;

				for (int j = start; j < end; j++)
					tmp[tmpIndex++] = str[j];
				tmp[tmpIndex] = '\0';

				matrix[k] = tmp;
				k++;
				c = 0;
			}
		}
		else if (c++ == 0)
		{
			start = i;
		}

		i++;
	}

	matrix[k] = NULL;

	return (matrix);
}
